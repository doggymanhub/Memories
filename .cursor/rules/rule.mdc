---
description: 
globs: 
alwaysApply: true
---
# プロジェクトルール

## 技術スタック
- 言語: C#
- UIフレームワーク: ModernWPF (WPF/.NET 8)

## コーディング規約
- クラス名、メソッド名はパスカルケース（例: ProjectRule）
- 変数名はキャメルケース（例: projectRule）
- ファイル名はクラス名と一致させる
- コメントは日本語で記述する
- 1ファイル1クラスを原則とする

## UI/UX
- ModernWPFのコントロールを優先的に使用する
- ダーク/ライトテーマ切替に対応する
- レスポンシブなレイアウトを心がける

## 設計・アーキテクチャ
- MVVMパターンを徹底し、ViewとViewModelの責務を明確に分離する
- 依存性注入（DI）を活用する

## その他
- 疑問がある場合は必ず相談する
- 設計.mdの計画を見て実装する
- もし設計と違う実装をすることになった場合、設計.mdを更新する

# エラーハンドリングに関するルール

## 基本方針
- 例外は極力早期に検知し、適切に処理すること。
- 予期できるエラー（バリデーションエラー、ユーザー操作ミス等）は例外ではなく通常のフローで制御する。
- 予期しないエラー（例外）はcatchし、アプリが異常終了しないようにする。

## 実装ルール
- try-catch文は必要最小限の範囲で使用し、catchブロックでは必ずログ出力またはユーザー通知を行う。
- ViewModel層では、ユーザーに通知すべきエラーはダイアログやトースト等で明示的に伝える。
- Model/Service層では、例外を上位にスローし、ViewModelでハンドリングすることを原則とする。
- 例外の再スロー時は元のスタックトレースを保持する（`throw;`を使用）。
- ログ出力には標準のロギングフレームワーク（例：Microsoft.Extensions.Logging）を利用する。
- 致命的なエラー時は、ユーザーに分かりやすいメッセージを表示し、可能な限り安全にアプリを継続または終了させる。

## UI/UX
- エラー内容はユーザーに分かりやすく、かつ内部実装の詳細は漏らさないようにする。
- 入力エラーやバリデーションエラーは、該当コントロール付近に明示的に表示する。
- 予期しないエラーは、ダイアログ等で通知し、必要に応じて再試行やサポート案内を提示する。

## その他
- エラー内容や発生箇所は、開発・運用時に追跡できるようログに記録する。

- 設計.mdや実装と異なるエラーパターンが発生した場合は、設計.mdおよび本ルールを随時更新する。


- 進捗.mdに実装済みの部分、これから実装する部分を書き足していく